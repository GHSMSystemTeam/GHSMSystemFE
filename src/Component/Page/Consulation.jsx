import React, { useEffect, useState, useRef } from 'react'
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../Auth/AuthContext';
import {
    Send,
    MessageCircle,
    User,
    Bot,
    Clock,
    Phone,
    Video,
    Calendar,
    Star,
    Shield,
    CheckCircle,
    ArrowLeft,
    UserCheck,
    Stethoscope,
    Heart,
    Users
} from 'lucide-react';
import Header from '../Header/Header';
import Footer from '../Footer/Footer';
import { useAuthCheck } from '../Auth/UseAuthCheck';
import { useToast } from '../Toast/ToastProvider';


export default function Consulation() {
    const { showToast } = useToast()
    const { checkAuthAndShowPrompt } = useAuthCheck();

    const [selectedConsultant, setSelectedConsultant] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [activeTab, setActiveTab] = useState('chat');
    const messagesEndRef = useRef(null);

    const consultants = [
        {
            id: 1,
            name: "BS. Nguy·ªÖn Th·ªã H∆∞∆°ng",
            specialty: "Chuy√™n khoa S·∫£n ph·ª• khoa",
            experience: "15 nƒÉm kinh nghi·ªám",
            rating: 4.9,
            reviews: 234,
            avatar: "üë©‚Äç‚öïÔ∏è",
            status: "online",
            description: "Chuy√™n gia v·ªÅ s·ª©c kh·ªèe sinh s·∫£n n·ªØ, t∆∞ v·∫•n k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh",
            consultationFee: "200,000 VNƒê"
        },
        {
            id: 2,
            name: "BS. Tr·∫ßn Minh Khoa",
            specialty: "Chuy√™n khoa Nam khoa",
            experience: "12 nƒÉm kinh nghi·ªám",
            rating: 4.8,
            reviews: 189,
            avatar: "üë®‚Äç‚öïÔ∏è",
            status: "online",
            description: "Chuy√™n gia v·ªÅ s·ª©c kh·ªèe nam gi·ªõi, r·ªëi lo·∫°n ch·ª©c nƒÉng t√¨nh d·ª•c",
            consultationFee: "250,000 VNƒê"
        },
        {
            id: 3,
            name: "BS. L√™ Th·ªã Mai",
            specialty: "T√¢m l√Ω h·ªçc L√¢m s√†ng",
            experience: "10 nƒÉm kinh nghi·ªám",
            rating: 4.9,
            reviews: 156,
            avatar: "üë©‚Äçüíº",
            status: "busy",
            description: "Chuy√™n gia t√¢m l√Ω t√¨nh d·ª•c, t∆∞ v·∫•n h√¥n nh√¢n v√† gia ƒë√¨nh",
            consultationFee: "180,000 VNƒê"
        },
        {
            id: 4,
            name: "BS. Ph·∫°m VƒÉn An",
            specialty: "Chuy√™n khoa Da li·ªÖu",
            experience: "8 nƒÉm kinh nghi·ªám",
            rating: 4.7,
            reviews: 98,
            avatar: "üë®‚Äç‚öïÔ∏è",
            status: "offline",
            description: "Chuy√™n gia v·ªÅ c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c",
            consultationFee: "220,000 VNƒê"
        }
    ];

    const quickQuestions = [
        "T∆∞ v·∫•n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n",
        "H·ªèi v·ªÅ c√°c x√©t nghi·ªám c·∫ßn thi·∫øt",
        "T∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c",
        "H·ªèi v·ªÅ c√°c bi·ªán ph√°p tr√°nh thai",
    ]

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSendMessage = async () => {
        if (!checkAuthAndShowPrompt('g·ª≠i tin nh·∫Øn')) {
            showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• n√†y', 'info');
            return
        }
        if (!newMessage.trim() || !selectedConsultant) return

        const userMessage = {
            id: Date.now(),
            text: newMessage,
            sender: 'user',
            timestamp: new Date().toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit',
            }),
        }

        setMessages(prev => [...prev, userMessage]);
        setNewMessage('');
        setIsTyping(true);

        //Stimulate consultant response
        setTimeout(() => {
            const consultantMessage = {
                id: Date.now() + 1,
                text: getConsultantResponse(newMessage),
                sender: 'consultant',
                timestamp: new Date().toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            }
            setMessages(prev => [...prev, consultantMessage]);
            setIsTyping(false);
        }, 2000)
    }

    const getConsultantResponse = (message) => {
        const responses = [
            `C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, t√¥i khuy√™n b·∫°n n√™n ${Math.random() > 0.5 ? 'th·ª±c hi·ªán m·ªôt s·ªë x√©t nghi·ªám c∆° b·∫£n' : 'ƒë·∫øn kh√°m tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n'}. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ tri·ªáu ch·ª©ng c·ª• th·ªÉ kh√¥ng?`,
            `T√¥i hi·ªÉu m·ªëi quan t√¢m c·ªßa b·∫°n. ƒê√¢y l√† m·ªôt v·∫•n ƒë·ªÅ kh√° ph·ªï bi·∫øn v√† ho√†n to√†n c√≥ th·ªÉ ƒëi·ªÅu tr·ªã. T√¥i s·∫Ω c·∫ßn th√™m m·ªôt s·ªë th√¥ng tin ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p nh·∫•t.`,
            `D·ª±a tr√™n kinh nghi·ªám ${selectedConsultant?.experience}, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y. Tr∆∞·ªõc ti√™n, h√£y c√πng t√¨m hi·ªÉu v·ªÅ t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa b·∫°n.`,
            `C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng chia s·∫ª. V·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i c·∫ßn ƒë∆∞·ª£c quan t√¢m ƒë√∫ng m·ª©c. T√¥i khuy√™n b·∫°n n√™n ƒë·∫∑t l·ªãch h·∫πn ƒë·ªÉ ƒë∆∞·ª£c thƒÉm kh√°m tr·ª±c ti·∫øp.`
        ];
        return responses[Math.floor(Math.random() * responses.length)];
    };

    const handleQuickQuestion = (question) => {
        setNewMessage(question)
    }

    const startConsultation = (consultant) => {
        if (!checkAuthAndShowPrompt('b·∫Øt ƒë·∫ßu t∆∞ v·∫•n')) return;
        setSelectedConsultant(consultant)
        setMessages([
            {
                id: 1,
                text: `Xin ch√†o! T√¥i l√† ${consultant.name}, ${consultant.specialty}. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay. B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªõi t√¥i v·∫•n ƒë·ªÅ b·∫°n ƒëang quan t√¢m kh√¥ng?`,
                sender: 'consultant',
                timestamp: new Date().toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                })
            }
        ]);
    }

    if (selectedConsultant) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
                {/* Header */}
                <div className="bg-white shadow-sm border-b">
                    <div className="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
                        <button
                            onClick={() => setSelectedConsultant(null)}
                            className="flex items-center space-x-2 text-gray-600 hover:text-gray-800"
                        >
                            <ArrowLeft size={20} />
                            <span>Quay l·∫°i</span>
                        </button>

                        <div className="flex items-center space-x-3">
                            <div className="text-2xl">{selectedConsultant.avatar}</div>
                            <div>
                                <h3 className="font-semibold text-gray-800">{selectedConsultant.name}</h3>
                                <p className="text-sm text-gray-600">{selectedConsultant.specialty}</p>
                            </div>
                            <div className={`w-3 h-3 rounded-full ${selectedConsultant.status === 'online' ? 'bg-green-500' : 'bg-gray-400'
                                }`}></div>
                        </div>

                        <div className="flex space-x-2">
                            <button className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg">
                                <Phone size={20} />
                            </button>
                            <button className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg">
                                <Video size={20} />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Chat Area */}
                <div className="max-w-4xl mx-auto flex flex-col h-[calc(100vh-80px)]">
                    {/* Messages */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4">
                        {messages.map((message) => (
                            <div
                                key={message.id}
                                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                            >
                                <div className={`flex items-start space-x-2 max-w-xs lg:max-w-md ${message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                                    }`}>
                                    <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm">
                                        {message.sender === 'user' ? <User size={16} /> : selectedConsultant.avatar}
                                    </div>
                                    <div className={`rounded-2xl px-4 py-2 ${message.sender === 'user'
                                        ? 'bg-blue-600 text-white'
                                        : 'bg-white border shadow-sm'
                                        }`}>
                                        <p className="text-sm">{message.text}</p>
                                        <p className={`text-xs mt-1 ${message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                                            }`}>
                                            {message.timestamp}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        ))}

                        {isTyping && (
                            <div className="flex justify-start">
                                <div className="flex items-start space-x-2">
                                    <div className="w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-sm">
                                        {selectedConsultant.avatar}
                                    </div>
                                    <div className="bg-white border rounded-2xl px-4 py-2 shadow-sm">
                                        <div className="flex space-x-1">
                                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                            <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>

                    {/* Quick Questions */}
                    <div className="px-4 py-2">
                        <div className="flex flex-wrap gap-2">
                            {quickQuestions.map((question, index) => (
                                <button
                                    key={index}
                                    onClick={() => handleQuickQuestion(question)}
                                    className="px-3 py-1 bg-white border border-gray-300 rounded-full text-sm text-gray-600 hover:bg-gray-50 hover:border-blue-300 transition-colors"
                                >
                                    {question}
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Message Input */}
                    <div className="p-4 bg-white border-t">
                        <div className="flex space-x-2">
                            <input
                                type="text"
                                value={newMessage}
                                onChange={(e) => setNewMessage(e.target.value)}
                                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                            <button
                                onClick={handleSendMessage}
                                disabled={!newMessage.trim()}
                                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
                            >
                                <Send size={20} />
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        )
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 pt-24 mt-10">
            <Header />
            {/* Features */}
            <div className="max-w-6xl mx-auto px-4 py-12">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
                    <div className="bg-white rounded-xl p-6 text-center shadow-lg">
                        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <Shield className="w-8 h-8 text-blue-600" />
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">B·∫£o m·∫≠t tuy·ªát ƒë·ªëi</h3>
                        <p className="text-sm text-gray-600">Th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c b·∫£o v·ªá ho√†n to√†n</p>
                    </div>

                    <div className="bg-white rounded-xl p-6 text-center shadow-lg">
                        <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <UserCheck className="w-8 h-8 text-green-600" />
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">Chuy√™n gia uy t√≠n</h3>
                        <p className="text-sm text-gray-600">ƒê·ªôi ng≈© b√°c sƒ© c√≥ ch·ª©ng ch·ªâ h√†nh ngh·ªÅ</p>
                    </div>

                    <div className="bg-white rounded-xl p-6 text-center shadow-lg">
                        <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <Clock className="w-8 h-8 text-purple-600" />
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">H·ªó tr·ª£ 24/7</h3>
                        <p className="text-sm text-gray-600">Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ m·ªçi l√∫c c·∫ßn thi·∫øt</p>
                    </div>

                    <div className="bg-white rounded-xl p-6 text-center shadow-lg">
                        <div className="w-16 h-16 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <Heart className="w-8 h-8 text-pink-600" />
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">T∆∞ v·∫•n t·∫≠n t√¢m</h3>
                        <p className="text-sm text-gray-600">L·∫Øng nghe v√† h·ªó tr·ª£ v·ªõi s·ª± th·∫•u hi·ªÉu</p>
                    </div>
                </div>

                {/* Consultants List */}
                <div className="mb-12">
                    <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">
                        ƒê·ªôi ng≈© chuy√™n gia
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {consultants.map((consultant) => (
                            <div key={consultant.id} className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                                <div className="flex items-start space-x-4">
                                    <div className="relative">
                                        <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-2xl">
                                            {consultant.avatar}
                                        </div>
                                        <div className={`absolute -bottom-1 -right-1 w-5 h-5 rounded-full border-2 border-white ${consultant.status === 'online' ? 'bg-green-500' :
                                            consultant.status === 'busy' ? 'bg-yellow-500' : 'bg-gray-400'
                                            }`}></div>
                                    </div>

                                    <div className="flex-1">
                                        <div className="flex items-start justify-between">
                                            <div>
                                                <h3 className="text-lg font-semibold text-gray-800">{consultant.name}</h3>
                                                <p className="text-blue-600 font-medium">{consultant.specialty}</p>
                                                <p className="text-sm text-gray-600">{consultant.experience}</p>
                                            </div>
                                            <div className="text-right">
                                                <div className="flex items-center space-x-1">
                                                    <Star className="w-4 h-4 text-yellow-500 fill-current" />
                                                    <span className="text-sm font-medium">{consultant.rating}</span>
                                                </div>
                                                <p className="text-xs text-gray-500">({consultant.reviews} ƒë√°nh gi√°)</p>
                                            </div>
                                        </div>

                                        <p className="text-sm text-gray-700 mt-2 mb-3">{consultant.description}</p>

                                        <div className="flex items-center justify-between">
                                            <span className="text-lg font-semibold text-green-600">{consultant.consultationFee}</span>
                                            <button
                                                onClick={() => startConsultation(consultant)}
                                                disabled={consultant.status === 'offline'}
                                                className={`px-6 py-2 rounded-lg font-medium transition-colors ${consultant.status === 'offline'
                                                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                                    : 'bg-blue-600 text-white hover:bg-blue-700'
                                                    }`}
                                            >
                                                {consultant.status === 'offline' ? 'Kh√¥ng tr·ª±c tuy·∫øn' : 'T∆∞ v·∫•n ngay'}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
            <Footer />
        </div>
    )
}
